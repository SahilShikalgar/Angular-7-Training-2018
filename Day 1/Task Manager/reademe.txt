html entities - &copy;   available w3school

model is a source of data

creating object in javascript
1) var task = {
   };

2) var task = { id:1 , 
		title:'Learn HTML' , 
		completed:true , 	
		data:new Date() 
	      };



adding class to input
	task.classList.add(is-valid');
	task.classList.remove('is-valid');



*****  IMP 
create new element and put it 

var h2 = document.createElement('h2');
h2.innerText = "fdfdfd":  // h2.innerHTML = 'fdsfsdf';

var pageHeader = document.querySelector('.page-header');
pageHEader.appendChild(h2);

pageHeader.removeChild(h2);

****************************************************************


angular update

npm install -g @anguar/cli

ng new Project

npm cache clean
npm cache clean --force

********************************************************************************************************
Drawbacks of JS over TS
1) Maintainance of JS code is not efficient

********************************************************************************************************
Type Script programming is base of angular 2 and above

History 
1) Angular JS 1.3 1.4 1.5 
Angular 2
Angular 3
Angular 4
Angular 5
Angular JS 1.6
	Angular 6   (Latest)
Angular JS 1.7

2) Ecma Script (ES)
JavaScript uses (ES3 -> ES5)
TypeScript ES6 + Some TS features

*****************************************************************************************************

Transpiler converts HLL to HLL (Convert TS to JS)

Babel converts TS to JS

TypeScript Conpiler 

npm install -g typescipt  (to install TS)

works or not 
tsc
******************************************************************************************************

tcs hello.ts

whatever common thing will be kept as it is to hello.js

tcs hello.js


*****************************************************************************************************
Type Scirpt concepts
* difference btn var and let
* fatarrow









Day 2
1) Components 
	creating a class
	@component({
		selector: '',
		template: ''
	});
	AngularCLI to create component
	Shopping cart UI in Angular   (Bootstrap 3)
		
2) Data Binding
	The process of transfering variables form components to templates or vice versa..
	{{  }}  - Interpolation   ----  transfering data from component to template		
	[] - property binding	  ----  component to template	
	() - Event Binding	---  	template to component
	[()] - 2-way binding
	# - tem	plate variables		----- variables can be accessed within the template
	Login Form case study       (Bootstrap 4)

Decorators 
	- @Component()
	- @NgModule()


Generating new component using visual studio code terminal
ng generate component bye
ng g c component/shared/header


Directives : 
	*ngFor	 -- structural directive
	ngModel  -- Attribute Directive
	
	***	calling model from current model is called composition model

app ->   components
		1) shared
			navbar
			header
			footer
		2) shopping cart
			filter
			product-list -- product-item
			cart


Install boostrap by using npm
npm install boostrap --save

for yarn
yarn add boostrap







*************************************************
day 3

- Task Manager Ui based on components (static)
- Making Task Manager Dynamic
- @Input() and @Output()

- Services in Angular (model)
- Modify task manager by services

- Template Driven Forms : Logib Form case study
- Reactive Forms: REgistration Form


***************************************************************************************************************************************************************
1) Task Manager Ui based on components (static)

		App 
 	
	Header 		Task Manager 		Footer
			

Task Manager 
1) Task Form
2) Task List			----------->>>>>>>>>>>>>>>>>>>>>    Task Item     


src -> app -> components 
			-> shared -> header,footer
			-> Task-manager -> Task Form , Task List-> Task Item;

*****************************************************************************************************************************************************************
How to install node module folder in copied project
	npm install 



Directives seen till now
- *ngFor
- ngModel

Decorators
- @Componenet()
- 

class
float-right


pipe:
	json   -- converts object to string


create custom property to pass from one html to other html
*** <    <app-task-item [taskItem]="task"></app-task-item> 


********************************************************************
new Decorator
-- input decorator 
  import { Component, OnInit , Input } from '@angular/core';
  @Input() taskItem:Task[];
************************************************************************

Event Binding
(submit)="addTask()"


Two way binding
[(ngModel)]="TaskTitle"
  TaskTitle:string = '';


*********************************************************
Transferring from component to another component

task form -> (to parent) task manager
send array from tasklist array to task manager to change 


************************************************************

*******************************************************************************************************************************************
@Output Directive :- used for taking event or function

task manager ts file
	addTask(taskTitle: string)
	{
		this.tasks.push(new Task(this.tasks.length+1,taskTitle));		//adding component into task
	}
	<app-task-form (add)"addTask($event)"></app-task-form>	

calling addTask function from Task Form  (passing event function from task manager to Task Form)
			//Event binding
In task form

@Output() add = new EventEmitter();
this.add.emit(TaskItem);


features of angular
1) two way binding 
2) Dependancy Injection
	which service we are going to use in any component we need to de dependancy injection

Generate Service
ng g s 

Decorator
Injectable
Input()
Output()
ngModel


register service to the app.module.ts
 import { TaskService } from '/services/task
also register in providers array


dependancy injection
constructor(private taskService:TaskService) {
    
   }


dynamically remove or add class in html control
1) [ngClass]="['is-invalid': false ]"			//add or remove class based on ngModel
2) ngStyle  - to show or hide component
3) *ngIf     -- *ngIf="taskList.length === 0"   structural directives

****************************************************************************************************************
speciality of Angular
which element we dont want that can be removed from html also 
******************************************************************************************************************

array 
splice and slice method

directive

****************************************************************************************
ngTemplate   --- in angular 4.2
<div *ngIf="taskList.length === 0; else listGroup"

<ng-template #listGroup>
















***********************************************************************************************************************************************************************
Day 4  -- patch http request


- HTTP CLient Module
	- HTTP verbs : GET , POST , PUT , DELETE , PATCH
	- It always returns observables


-JSON server (in-built server ) which can be used for developement in local server
	npm install -g json-server (Dummy API server for us.)			db.json


- Machanism of Observables 9Rx-JS) 				latest tech for asynchronous programming
	const task = http.get(apiurl); //this would not happen
	http.get(apiurl).subscribe( (data) => {
		//populate the task list.
	});


- subject is needed ( reactivex.io )
		Assignment
		   -- make simple api via node.js
		   -- use the POSTMAN REST Client.
		- next event


***********************************************************************************************************************************************************************
Forms in angular : 
attrubutes - valid invalid touched untouched dirty pristine

-- Template Driven Forms (Login Form)					---------- FormsModule
	dirctive : ngForm , (ngSubmit)
-- Reactive (Model Driven Form) (Registration form)				ReactiveModule
-- Custom validation

login form - template driven form
register for - model driven form

Reactive Form
	- FormCotrol (class or directive)
	- FormGroup	class			FormControlName	combination
	- FormBuilder


**********************************************************************************************
Approch 1 : 

import { ReactiveFormsControl } from '@angular/forms';	in app.module.ts

import { FormControl } from '@angular/forms';

name: FormControl;

[FormControl]="name"

ngOnInIt()
{
	this.name=new FormControl('sdsfdfdf');
}

reflet in control

*************************************************************************************************


















***********************************************************************************************************************************************************************

API Developement (simplement way using node js or php)

json-server db.json
and open link : http://localhost:3000/tasks

postman API in Android

***********************************************************************************************************************************************************************





*******************************************************************************************************************************************************************
Day 5

- Routing
	- import routing model into ts file for registration
   	= routes = as a data type of the router
	- router = to navigate programatically
	- activatedRouter - to fetch URL parameter
	- directive -routerLink , router-outlt

	how to register router
	1) forRoot()
	2) forChild()
	
import { RouterModule , Routes } from '@angular/router';

//creating routes
const routes: Routes = [
    { path: 'login',component: LoginComponent }, 
    { path: 'register', component: RegisterComponent },
    { path: 'tasks' , component: TaskManagerComponent }
];

imports 
    RouterModule.forRoot(routes)

for linking
<router-outlet></router-outlet>

routerLink directive to link different links	

for redirecting automatically
use library 
	- router which is injectable
	- navigate method

this.userService.authenticate(this.model).subscribe((data){
	this.model.navigate('tasks');	
});

---   JSON.stringify{{value:30}}			converts object into string in localstorage in java script 
----  JSON.parse(age)					converts string to object in javascript
	 
	

// store data common data
Router Guard
	-CanActivate
	-CanDeactivate

ng g guard guards/auth

******************************************************************************************************************************************************************

- Pipes  - always work on template level. it does't affect our data source
	| json , date ,uppercase , lowercase , currency
	custom pipes

	creating pipe
	ng g pipe pipes/pipeUppecase

	creating directives 
	ng g 
	
Decrators :
	@Pipe
	@component
	@input
	@output
	@ngmodule
	@injectable


ElementRef class

https://angular.io/		- follow this tutorial
https://angularjs.org/

******************************************************************************************************************************************************************

-- Directives
	- ngFor
	- ngIf
	- ngClass
	- ngModel
 	- ngStyle
	- ngSwitch
	- ngFOrm
	- formGroup
	- formControl
	- formControlName
	how to crate custom directives	***************






-  Unit Testing				(Automated unit testing)
	- Introduction
	- case study - counter component case study
	- Keywords which can be applied to any front end lang =  
		- Jasmine (Framework)   3 keywords -
						 describe()  == -Test Group
						 it()	     == Test Case
						 expect()    == Assertion Library
		- Karma (task-runner)	












deploynment
ng build		production
dist - folder will get created			with dependacy

delete dist

ng build --prod (without dependancy)
dist



























